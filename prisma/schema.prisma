generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id         String      @id @default(uuid())
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  products   Product[]   @relation("StoreToProduct")
  orders     Order[]     @relation("StoreToOrder")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Billboard {
  id           String     @id @default(uuid())
  storeId      String
  store        Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label        String
  imageUrl     String
  isNameHidden Boolean    @default(true)
  categories   Category[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String // Foreign Key to Store
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String // Foreign Key to Billboard
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id         String      @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String // Foreign Key to Category
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String // Foreign Key to Size
  size       Size        @relation(fields: [sizeId], references: [id])
  colorId    String // Foreign Key to Color
  color      Color       @relation(fields: [colorId], references: [id])
  images     Image[] // Relation to Image model
  OrderItem  OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  // Add AMOUNT for this product
  // amount Int

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Size {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id        String    @id @default(uuid())
  storeId   String // Foreign Key to Store
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id        String   @id @default(uuid())
  productId String // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id                        String      @id @default(uuid())
  storeId                   String
  store                     Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems                OrderItem[]
  isPaid                    Boolean     @default(false)
  // client info
  firstName                 String      @default("")
  lastName                  String      @default("")
  cedula                    String      @default("")
  address1                  String      @default("")
  address2                  String      @default("")
  postalcode                String      @default("")
  departamento              String      @default("")
  city                      String      @default("")
  phone                     String      @default("")
  email                     String      @default("")
  notes                     String      @default("")
  deliveryMethod            Int         @default(0)
  deliveryMethodName        String      @default("")
  deliveryMethodShopAddress String      @default("")
  deliveryMethodCost        Decimal     @default(0)
  deliveryAddress1          String      @default("")
  deliveryAddress2          String      @default("")
  deliveryCedula            String      @default("")
  deliveryCity              String      @default("")
  deliveryDepartamento      String      @default("")
  deliveryLastname          String      @default("")
  deliveryName              String      @default("")
  deliveryPhone             String      @default("")
  deliveryPostalcode        String      @default("")
  pickupCedula              String      @default("")
  pickupFullName            String      @default("")
  TandC                     Boolean     @default(false)
  differentAddress          Boolean     @default(false)
  totalPrice                Decimal     @default(0)
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
